generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
  engineType = "library"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  password  String
  role      UserRole
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  transcriptionsAssigned Transcription[] @relation("AssignedTo")
  transcriptionsEdited   Transcription[] @relation("EditedBy")
}

model Transcription {
  id                String              @id @default(cuid())
  filename          String
  filePath          String
  content           String              @default("")
  state             TranscriptionState  @default(PENDING)

  assessmentId      String?
  assessmentIdCitation String?
  assessmentIdConfidence Float?
  country           String?
  countryCitation   String?
  countryConfidence Float?
  dateOfDiscussion  String?
  dateOfDiscussionCitation String?
  dateOfDiscussionConfidence Float?
  location          String?
  locationCitation  String?
  locationConfidence Float?
  purpose           String?
  purposeCitation   String?
  purposeConfidence Float?
  method            String?
  methodCitation    String?
  methodConfidence  Float?
  language          String?
  languageCitation  String?
  languageConfidence Float?

  facilitatorName   String?
  facilitatorNameCitation String?
  facilitatorNameConfidence Float?
  facilitatorOrg    String?
  facilitatorOrgCitation String?
  facilitatorOrgConfidence Float?
  facilitatorEmail  String?
  facilitatorEmailCitation String?
  facilitatorEmailConfidence Float?

  noteTakerName     String?
  noteTakerNameCitation String?
  noteTakerNameConfidence Float?
  noteTakerOrg      String?
  noteTakerOrgCitation String?
  noteTakerOrgConfidence Float?
  noteTakerEmail    String?
  noteTakerEmailCitation String?
  noteTakerEmailConfidence Float?

  participantsNumber        Int?
  participantsNumberCitation String?
  participantsNumberConfidence Float?
  participantsNationalities String?
  participantsNationalitiesCitation String?
  participantsNationalitiesConfidence Float?
  participantsProfile       String?
  participantsProfileCitation String?
  participantsProfileConfidence Float?
  participantsEnvironment   String?
  participantsEnvironmentCitation String?
  participantsEnvironmentConfidence Float?
  participantsSex           String?
  participantsSexCitation   String?
  participantsSexConfidence Float?
  participantsAgeRange      String?
  participantsAgeRangeCitation String?
  participantsAgeRangeConfidence Float?
  participantsGroupType     String?
  participantsGroupTypeCitation String?
  participantsGroupTypeConfidence Float?

  aiProcessedAt     DateTime?
  aiError           String?

  assignedToId      String?
  assignedTo        User?    @relation("AssignedTo", fields: [assignedToId], references: [id])

  lastEditedById    String?
  lastEditedBy      User?    @relation("EditedBy", fields: [lastEditedById], references: [id])

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  topics            Topic[]
}

model Topic {
  id                    String  @id @default(cuid())
  transcriptionId       String
  transcription         Transcription @relation(fields: [transcriptionId], references: [id], onDelete: Cascade)

  outcomeAreaCode       String?
  outcomeAreaName       String?
  category              String?
  subcategory           String?
  type                  String?
  subcategoryDefinition String?
  description           String?
  assessment            String?
  citations             String?
  confidence            Float?

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

enum UserRole {
  ADMIN
  VALIDATOR1
  VALIDATOR2
}

enum TranscriptionState {
  PENDING
  CHECK_BY_AI
  CHECK_BY_VALIDATOR
  COMPLETE
}
